<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on valar morghulis</title>
    <link>https://efvhi.github.io/tags/go/</link>
    <description>Recent content in go on valar morghulis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 21 May 2019 19:09:47 +0800</lastBuildDate>
    
	<atom:link href="https://efvhi.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Mircro - 架构与微服务的设计模式</title>
      <link>https://efvhi.github.io/post/go-mircro-design/</link>
      <pubDate>Tue, 21 May 2019 19:09:47 +0800</pubDate>
      
      <guid>https://efvhi.github.io/post/go-mircro-design/</guid>
      <description>微服务 微服务其实是业务 模块化 的概念, 类似于编程的时候把一个业务 函数 模块化一样。
micro 中各种基础组件  Go Micro 是一个用 golang 编写的，插件化的 RPC 框架。它提供了基础的库，比如服务发现、客户端负载均衡、编解码、同步异步通信等。 Micro API 是一个 API 网关，用于将外部的 HTTP 请求路由到内部的 micro 服务上。它有单一的接入点，可以通过反向代理或者 http 转换成 RPC 来访问。 Micro Web 是一个 web 仪表盘，也是作为 micro web 应用的反向代理。我们相信 web 应用也应该是一个微服务，在微服务世界里也应该是第一等公民。它表现的很像 Micro API 但也有单独的特性比如 websocket。 Micro Sidecar 使用 http 服务，提供了 go-micro 的所有特性。虽然我们喜欢 golang 来构建微服务，但你也许想使用其他语言。所以 Sidecar 提供了一种其他语言的应用接入 Micro 世界的方式。 Micro CLI 是一个简单直接的命令行接口，用于与你的服务交互。他也可以使用你的 Sidecar 作为代理来连接服务。  API + GRPC + 注册发现 http 请求 + grpc 内部服务互相通讯 是连接 客户端 和 各种微服务的方式, 其中微服务相互进行数据交换离不开服务的注册和发现，如 consul， 提供 dns、负载均衡等等功能.</description>
    </item>
    
    <item>
      <title>Go Channel Select 使用</title>
      <link>https://efvhi.github.io/post/go-channel-selet/</link>
      <pubDate>Wed, 20 Mar 2019 17:46:44 +0800</pubDate>
      
      <guid>https://efvhi.github.io/post/go-channel-selet/</guid>
      <description>同步模式 channel 默认为同步模式，即不创建缓冲区，发送和接收需要一一配对，不然发送方会被一直阻塞，直到数据被接收。需要注意的是，同步的 channel 不能在一个协程中发送&amp;amp;接收，因为会被阻塞而永远跑不到接收的语句。
package main import &amp;quot;fmt&amp;quot; func main() { data := make(chan int) go func() { for d := range data {//通过range不断地处理data fmt.</description>
    </item>
    
    <item>
      <title>Go Goroutine</title>
      <link>https://efvhi.github.io/post/goroutine/</link>
      <pubDate>Mon, 21 Jan 2019 18:51:34 +0800</pubDate>
      
      <guid>https://efvhi.github.io/post/goroutine/</guid>
      <description>Goroutine是Go里的一种轻量级线程——协程。相对线程，协程的优势就在于它非常轻量级，进行上下文切换的代价非常的小。对于一个goroutine ,每个结构体G中有一个sched的属性就是用来保存它上下文的。这样，goroutine 就可以很轻易的来回切换。由于其上下文切换在用户态下发生，根本不必进入内核态，所以速度很快。而且只有当前goroutine 的 PC, SP等少量信息需要保存。 在Go语言中，每一个并发的执行单元为一个goroutine。当我们开始运行一个Go程序时，它的入口函数 main 实际上就是运行在一个goroutine 里。
调度器sheduler 每个goroutine的运行都是由Go语言里的调度器(scheduler）决定的。 先说操作系统的线程调度。在POSIX 中有一个sheduler的内核函数，每过几ms会被执行一次。每次执行时，会挂起当前执行线程，同时保存它寄存器中信息，接着查看线程列表决定下一个线程的运行， 从内存中必复其寄存器信息和现场并开始执行。不同线程之间存在上下文切换，这包括保存一个用户线程的状态到内存，恢复另一个线程的信息到寄存器，同时还要更新sheduler相关的数据结构。这些操作都很耗时。 Go 语言的Runtime有自己的sheduler，通过它我们可以在n个操作系统的线程上调度m个goroutine。实际上Go 的sheduler与操作系统的sheduler是非常相似的，只不过它只关心goroutine的调度。与操作系统sheduler不同的是，Go的sheduler不使用硬件定时器，当一个goroutine 调用了time.Sleep、触发一个channel 操作或者使用 mutex， scheduler 会使这个 goroutine 进行睡眠，进而去唤醒另外一个goroutine，这种调度方式没有上下文之间的切换，它的代价比操作系统的线程调度要小得多。 Go的调度的实现，涉及到几个重要的数据结构。运行时库用这几个数据结构来实现goroutine的调度，管理goroutine和物理线程的运行。这些数据结构分别是结构体G，结构体M，结构体P，以及 Sched 结构体。这三个结构定义在文件 runtime/runtime.</description>
    </item>
    
    <item>
      <title>Go Web Gin 框架</title>
      <link>https://efvhi.github.io/post/go-web-gin/</link>
      <pubDate>Thu, 10 Jan 2019 19:01:09 +0800</pubDate>
      
      <guid>https://efvhi.github.io/post/go-web-gin/</guid>
      <description>gin 的设计模式 gin的设计模式比较简单（相对于复杂的参考python的django和flask基础进行设计的beego来说，少了MVC的设计思路指导，也不会严格区分model，controller，router等）。
gin 的核心功能  http请求的 Context 上下文
 基础的 auth 认证模块
 带颜色的 logger 模块
 运行模式 mode 设定</description>
    </item>
    
  </channel>
</rss>